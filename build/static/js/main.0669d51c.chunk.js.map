{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","maze","notifications","result","_this2","findRoute","mazeArr","startPoint","finalPoint","console","log","currentPosition","preReturnMode","finDdirectionObj","isReturnMode","directionObj","isFinal","findDirection","rowStr","y","substr","x","parseInt","charAt","position","value","setState","toString","replace","returnMode","findMove","canMove","filter","item","direction","length","minValue","Math","min","apply","toConsumableArray","map","floor","random","canMoveDirection","mazeValue","moveDirection","top","down","left","right","mazePosition","textAreaStyle","fontFamily","react_default","a","createElement","className","rows","cols","onChange","e","target","style","onClick","split","numberOfStart","numberOfFinal","i","indexOf","push","status","message","dangerouslySetInnerHTML","__html","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0669d51c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      maze: `###################\ns #              ##\n# # ############ ##\n#   ###          ##\n####### ###########\n# ##### ###########\n# ##### ###########\n# #####      ######\n# ##### #### ######\n# ##### ####      #\n# ##### #### ######\n#       ####      f\n###################`,\n      notifications: [],\n      result: \"\"\n    };\n  }\n\n  render() {\n    const handleClick = () => {\n      let notifications = [];\n      let mazeArr = this.state.maze.split(\"\\n\");\n      let startPoint = { x: 0, y: 0 };\n      let finalPoint = { x: 0, y: 0 };\n      let numberOfStart = 0;\n      let numberOfFinal = 0;\n\n      for (let i = 0; i < mazeArr.length; i++) {\n        if (mazeArr[i].indexOf('s') >= 0) {\n          numberOfStart = numberOfStart + 1;\n            startPoint.x = mazeArr[i].indexOf('s');\n            startPoint.y = i;\n        } else if (mazeArr[i].indexOf('f') >= 0) {\n          numberOfFinal = numberOfFinal + 1;\n          finalPoint.x = mazeArr[i].indexOf('f');\n          finalPoint.y = i;\n        }\n      }\n        \n\n      if (numberOfFinal > 1) {\n        notifications.push({\n          status: \"warning\",\n          message: \"More than one start point founded\"\n        });\n      }\n      if (numberOfFinal === 0) {\n        notifications.push({\n          status: \"error\",\n          message: \"there is no starting point\"\n        });\n      }\n\n      if (numberOfStart > 1) {\n        notifications.push({\n          status: \"warning\",\n          message: \"More than one start point founded\"\n        });\n      }\n      if (numberOfStart === 0) {\n        notifications.push({\n          status: \"error\",\n          message: \"there is no starting point\"\n        });\n      }\n\n      this.setState({ notifications });\n\n      findRoute(mazeArr, startPoint, finalPoint);\n    };\n\n    const handleChange = e => {\n      this.setState({ maze: e.target.value });\n    };\n\n    const findRoute = (mazeArr, startPoint, finalPoint) => {\n\n      console.log(mazeArr);\n      console.log(startPoint);\n      console.log(finalPoint);\n\n      // let routeArray = mazeArr.map(row => \"-1\".repeat(row.length));\n      // console.log(routeArray);\n\n      let currentPosition = startPoint;\n      let preReturnMode = false;\n      let finDdirectionObj = {\n        isReturnMode: false, \n        directionObj: {}\n      }\n      while (!isFinal(currentPosition, finalPoint)) { \n        finDdirectionObj = findDirection(mazeArr, currentPosition, finDdirectionObj.isReturnMode);\n        if(!preReturnMode && finDdirectionObj.isReturnMode){\n          let rowStr = mazeArr[currentPosition.y];\n          mazeArr[currentPosition.y] = rowStr.substr(0, currentPosition.x) + (parseInt(mazeArr[currentPosition.y].charAt(currentPosition.x)) + 1) + rowStr.substr(currentPosition.x + 1);\n          \n        }\n\n        preReturnMode = finDdirectionObj.isReturnMode;\n        if (finDdirectionObj.isReturnMode) {\n          \n        }\n        currentPosition = finDdirectionObj.directionObj.position;\n\n        let rowStr = mazeArr[currentPosition.y];\n        mazeArr[currentPosition.y] = rowStr.substr(0, currentPosition.x) + (parseInt(finDdirectionObj.directionObj.value) + 1) + rowStr.substr(currentPosition.x + 1);\n        \n      }\n      this.setState({result: mazeArr.toString().replace(/,/g, '<br>').replace(/ /g, 0).replace(/#/g, \"<strong>#</strong>\")});\n\n}\n\nconst isFinal = (currentPosition, finalPoint) => {\n  return currentPosition.x === finalPoint.x && currentPosition.y === finalPoint.y;\n}\n\n\nconst findDirection = (mazeArr, currentPosition, returnMode) => {\nlet isReturnMode = returnMode;\n\nlet move = [\n  canMove('top', mazeArr, currentPosition), \n  canMove('down', mazeArr, currentPosition), \n  canMove('right', mazeArr, currentPosition), \n  canMove('left', mazeArr, currentPosition)\n];\n\nlet findMove = move.filter(item => item.direction !== \"noMove\");\n\nif (findMove.length === 1 && findMove[0].value !== 0) {\n  isReturnMode = true;\n} else if (isReturnMode && findMove.length > 2) {\n  isReturnMode = false;\n}\n\nif (findMove.length > 1) {\n  let minValue = Math.min(...findMove.map(item => parseInt(item.value)));\nfindMove = findMove.filter(item => parseInt(item.value) === minValue);\n}\n\nconst randomDirection = Math.floor((Math.random() * findMove.length))\n\nreturn {isReturnMode: isReturnMode, directionObj: findMove[randomDirection]};\n}\n\nconst canMove = (direction, mazeArr, currentPosition) => {\nlet canMoveDirection = false;\nlet mazeValue = \"#\";\n\nconst moveDirectionObj = {\n  top: {x:0, y:-1},\n  down: {x:0, y:1},\n  left: {x:-1, y:0},\n  right: {x:1, y:0}\n}\n\nconst moveDirection = moveDirectionObj[direction];\nconst mazePosition = {\n  x: currentPosition.x + moveDirection.x,\n  y: currentPosition.y + moveDirection.y\n};\n\nif (mazePosition.x >= 0 && mazePosition.y >= 0 && mazeArr.length >= mazePosition.y && mazeArr[mazePosition.y] && (mazeArr[mazePosition.y].length >= mazePosition.x)) {\n  \n mazeValue = mazeArr[mazePosition.y].charAt(mazePosition.x);\n canMoveDirection = (mazeValue !== \"#\") && (mazeValue !== \"s\");\n}\n\n  return {position: mazePosition, value: mazeValue === \" \" || mazeValue === \"f\" ? 0 : mazeValue, direction: canMoveDirection ? direction : \"noMove\"};\n}\n\nvar textAreaStyle = {\n  fontFamily: \"Courier New\"\n};\n\n    return (\n      <div className=\"App\">\n        <textarea rows=\"8\" cols=\"50\" onChange={handleChange} style={textAreaStyle}>\n          {this.state.maze}\n        </textarea>\n        <div>\n          <button onClick={handleClick}>Start</button>\n          </div>\n        <div dangerouslySetInnerHTML={{__html: this.state.result}} style={textAreaStyle} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n// ###################\n// s #              ##\n// # # ############ ##\n// #   ###          ##\n// ####### ###########\n// # ##### ###########\n// # ##### ###########\n// # #####      ######\n// # ##### #### ######\n// # ##### ####      #\n// # ##### #### ######\n// #       ####      f\n// ###################","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}